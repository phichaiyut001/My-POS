var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/index.ts
var src_exports = {};
__export(src_exports, {
  Barcode: () => Barcode,
  Br: () => Br,
  Cashdraw: () => Cashdraw,
  Cut: () => Cut,
  Image: () => Image2,
  Line: () => Line,
  Printer: () => Printer,
  QRCode: () => QRCode,
  Raw: () => Raw,
  Row: () => Row,
  Text: () => Text,
  render: () => render,
  textLength: () => textLength,
  wrapText: () => wrapText
});
module.exports = __toCommonJS(src_exports);

// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/components/Printer.tsx
var import_classnames = __toESM(require("classnames"));
var import_jsx_runtime = require("react/jsx-runtime");
function Printer({
  type,
  width,
  characterSet,
  initialize,
  debug,
  children,
  className,
  ...props
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
    "data-printer-type": type,
    "data-character-set": characterSet,
    "data-initialize": initialize,
    "data-width": width,
    "data-debug": debug,
    className: (0, import_classnames.default)("rtp-printer", className),
    ...props,
    children
  });
}

// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/components/Br.tsx
var import_classnames2 = __toESM(require("classnames"));
var import_jsx_runtime = require("react/jsx-runtime");
var Br = ({ className, ...props }) => {
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("br", {
    className: (0, import_classnames2.default)("rtp-br", className),
    ...props
  });
};
Br.print = (_, { printer }) => {
  printer.newLine();
};

// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/components/Cashdraw.tsx
var import_jsx_runtime = require("react/jsx-runtime");
var Cashdraw = () => {
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, {});
};
Cashdraw.print = (elem, { printer }) => {
  const { pin } = elem.props;
  printer.cashdraw(pin);
};

// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/components/Cut.tsx
var import_jsx_runtime = require("react/jsx-runtime");
var Cut = () => {
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, {});
};
Cut.print = (elem, { printer }) => {
  const { lineFeeds = 6 } = elem.props;
  for (let i = 0; i < lineFeeds; i++) {
    printer.newLine();
  }
  printer.cut();
};

// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/components/Line.tsx
var import_classnames3 = __toESM(require("classnames"));
var import_jsx_runtime = require("react/jsx-runtime");
var Line = ({ character, className, ...props }) => {
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("hr", {
    "data-character": character,
    className: (0, import_classnames3.default)("rtp-line", className),
    ...props
  });
};
Line.print = (elem, { printer, width }) => {
  const { character = "-" } = elem.props;
  for (let i = 0; i < width; i++) {
    printer.text(character);
  }
  printer.newLine();
};

// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/components/Text.tsx
var import_classnames4 = __toESM(require("classnames"));

// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/utils/reactNodeToString.tsx
var import_server = require("react-dom/server");
var import_jsx_runtime = require("react/jsx-runtime");
var replaces = [
  { from: /&quot;/g, to: `"` },
  { from: /&amp;/g, to: `&` },
  { from: /&#x27;/g, to: `'` },
  { from: /&lt;/g, to: `<` },
  { from: /&gt;/g, to: `>` }
];
function reactNodeToString(node) {
  let str = (0, import_server.renderToStaticMarkup)(/* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, {
    children: node
  }));
  replaces.forEach(({ from, to }) => {
    str = str.replace(from, to);
  });
  return str;
}

// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/components/Text.tsx
var import_jsx_runtime = require("react/jsx-runtime");
var Text = ({
  align,
  bold,
  font,
  underline,
  invert,
  size,
  inline,
  className,
  children,
  ...props
}) => {
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
    "data-align": align,
    "data-bold": bold,
    "data-font": font,
    "data-underline": underline,
    "data-invert": invert,
    "data-size-width": size?.width,
    "data-size-height": size?.height,
    "data-inline": inline,
    className: (0, import_classnames4.default)("rtp-text", className),
    ...props,
    children
  });
};
Text.print = (elem, { printer }) => {
  const { children, align, bold, underline, invert, size, inline = false } = elem.props;
  if (children == null) {
    return;
  }
  if (align != null) {
    printer.setAlign(align);
  }
  if (bold != null) {
    printer.setTextBold(bold);
  }
  if (underline != null) {
    printer.setTextUnderline(underline);
  }
  if (invert != null) {
    printer.invert(true);
  }
  if (size != null) {
    printer.setTextSize(size.width, size.height);
  }
  printer.text(reactNodeToString(children));
  if (!inline) {
    printer.newLine();
  }
};

// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/components/Raw.tsx
var import_jsx_runtime = require("react/jsx-runtime");
var Raw = () => {
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, {});
};
Raw.print = (elem, { printer }) => {
  const { data } = elem.props;
  printer.raw(data instanceof Uint8Array ? data : new Uint8Array(data));
};

// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/components/Image.tsx
var import_classnames5 = __toESM(require("classnames"));

// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/utils/readImage.ts
function readImage(src) {
  return new Promise((resolve, reject) => {
    const img = new Image();
    img.crossOrigin = "";
    img.onload = () => {
      const canvas = document.createElement("canvas");
      canvas.width = img.width;
      canvas.height = img.height;
      const context = canvas.getContext("2d");
      if (context == null) {
        reject(new Error("cannot get context"));
        return;
      }
      context.drawImage(img, 0, 0);
      const { data } = context.getImageData(0, 0, img.width, img.height);
      resolve({
        data: new Uint8Array(data),
        width: img.width,
        height: img.height
      });
    };
    img.onerror = (err) => reject(err);
    img.src = src;
  });
}

// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/components/Image.tsx
var import_jsx_runtime = require("react/jsx-runtime");
var Image2 = ({ align, src, reader: _, className, ...props }) => {
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("img", {
    "data-align": align,
    "data-src": src,
    src,
    className: (0, import_classnames5.default)("rtp-image", className),
    ...props
  });
};
Image2.print = async (elem, { printer }) => {
  const {
    align,
    transforms = [],
    rgbToBlack,
    reader = ({ props: { src } }) => readImage(src)
  } = elem.props;
  let image = await reader(elem);
  for (const transform of transforms) {
    image = transform(image);
  }
  if (align != null) {
    printer.setAlign(align);
  }
  printer.image(image, { rgbToBlack });
};

// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/components/QRCode.tsx
var import_jsx_runtime = require("react/jsx-runtime");
var QRCode = () => {
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, {});
};
QRCode.print = (elem, { printer }) => {
  const { content, align = "left", ...options } = elem.props;
  if (align != null) {
    printer.setAlign(align);
  }
  printer.qrcode(content, options);
};

// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/components/Barcode.tsx
var import_jsx_runtime = require("react/jsx-runtime");
var Barcode = () => {
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, {});
};
Barcode.print = (elem, { printer }) => {
  const { type, content, align, ...options } = elem.props;
  if (align != null) {
    printer.setAlign(align);
  }
  printer.barcode(content, type, options);
};

// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/components/Row.tsx
var import_classnames6 = __toESM(require("classnames"));
var import_react = require("react");

// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/utils/resetPrinter.ts
function resetPrinter(printer) {
  printer.setTextNormal().setTextSize(1, 1).setAlign("left").invert(false);
}

// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/utils/sum.ts
function sum(...nums) {
  return nums.flat().reduce((acc, curr) => {
    return acc + curr;
  }, 0);
}

// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/utils/textLength.ts
function textLength(text, { size = 1 } = {}) {
  return sum(
    text.split("").map(charLength).map((x) => x * size)
  );
}
function charLength(char) {
  const code = char.charCodeAt(0);
  return code > 127 && code <= 65535 ? 2 : 1;
}

// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/utils/wrapText.ts
function wrapText(text, options) {
  const { size, width } = options;
  const lines = [];
  const chars = text.split("");
  let line = "";
  chars.forEach((char, i) => {
    line = `${line}${char}`;
    const lengthOfLine = textLength(line, { size });
    if (lengthOfLine > width) {
      line = line.slice(0, line.length - 1);
      lines.push(adjustLine(line, size, width));
      line = char;
    }
    const isLast = i === chars.length - 1;
    if (isLast && line.length > 0) {
      lines.push(adjustLine(line, size, width));
    }
  });
  return lines;
}
function adjustLine(line, size, length) {
  const spaceCount = calcSpaceCount(line, size, length);
  return `${line}${" ".repeat(spaceCount)}`;
}
function calcSpaceCount(line, size, length) {
  let count = 0;
  while (true) {
    const lineWithSpace = `${line}${" ".repeat(count)}`;
    const lineLength = textLength(lineWithSpace, { size });
    if (lineLength >= length) {
      return lineLength === length ? count : count - 1;
    }
    count += 1;
  }
}

// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/components/Row.tsx
var import_jsx_runtime = require("react/jsx-runtime");
var Row = ({ left, center, right, gap, className, ...props }) => {
  const leftEl = typeof left === "string" ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Text, {
    children: left
  }) : left;
  const centerEl = typeof center === "string" ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Text, {
    children: center
  }) : center;
  const rightEl = typeof right === "string" ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Text, {
    children: right
  }) : right;
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
    "data-gap": gap,
    className: (0, import_classnames6.default)("rtp-row", className),
    ...props,
    children: [
      (0, import_react.cloneElement)(leftEl, { className: (0, import_classnames6.default)("rtp-row-left", leftEl.props.className) }),
      centerEl !== void 0 ? (0, import_react.cloneElement)(centerEl, {
        className: (0, import_classnames6.default)("rtp-row-center", centerEl.props.className)
      }) : null,
      (0, import_react.cloneElement)(rightEl, { className: (0, import_classnames6.default)("rtp-row-right", rightEl.props.className) })
    ]
  });
};
Row.print = (elem, { printer, width }) => {
  const { left, center, right, gap = 0 } = elem.props;
  const leftElem = typeof left === "string" ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Text, {
    children: left
  }) : left;
  const centerElem = typeof center === "string" ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Text, {
    children: center
  }) : center;
  const rightElem = typeof right === "string" ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Text, {
    children: right
  }) : right;
  const leftString = reactNodeToString(leftElem.props.children);
  const leftSize = leftElem.props.size?.width;
  const leftLength = textLength(leftString, { size: leftSize });
  const centerString = centerElem !== void 0 ? reactNodeToString(centerElem.props.children) : void 0;
  const centerSize = centerElem?.props.size?.width;
  const rightString = reactNodeToString(rightElem.props.children);
  const rightSize = rightElem.props.size?.width;
  const rightLength = textLength(rightString, { size: rightSize });
  const leftLineWidth = centerElem !== void 0 ? leftLength : width - gap - rightLength;
  const leftLines = wrapText(leftString, {
    size: leftSize,
    width: leftLineWidth
  });
  const centerLineWidth = width - Math.max(gap * 2, 1) - leftLength - rightLength;
  const centerLines = centerString !== void 0 ? wrapText(centerString, { size: centerSize, width: centerLineWidth }) : void 0;
  const rightLineWidth = rightLength;
  const rightLines = wrapText(rightString, {
    size: rightSize,
    width: rightLineWidth
  });
  const maxLines = Math.max(leftLines.length, centerLines?.length ?? 0, rightLines.length);
  for (let i = 0; i < maxLines; i++) {
    const leftLine = leftLines[i];
    const centerLine = centerLines?.[i];
    const rightLine = rightLines[i];
    if (leftLine != null) {
      Text.print(lineText(leftElem, leftLine), { printer, width });
      resetPrinter(printer);
    } else {
      space(printer, leftLineWidth);
    }
    if (centerElem != null) {
      space(printer, gap);
      if (centerLine != null) {
        Text.print(lineText(centerElem, centerLine), { printer, width });
        resetPrinter(printer);
      } else {
        space(printer, centerLineWidth);
      }
    }
    space(printer, gap);
    if (rightLine != null) {
      Text.print(lineText(rightElem, rightLine), { printer, width });
      resetPrinter(printer);
    } else {
      space(printer, rightLineWidth);
    }
    printer.newLine();
  }
};
function space(printer, length) {
  printer.text(" ".repeat(length));
}
function lineText(textElem, text) {
  return (0, import_react.cloneElement)(textElem, {
    align: "left",
    inline: true,
    children: text
  });
}

// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/render.ts
var import_printer = require("@react-thermal-printer/printer");
var import_react2 = require("react");

// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/types/Printable.ts
function isPrintable(val) {
  return typeof val === "function" && typeof val.print === "function";
}

// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/render.ts
async function render(elem) {
  const { type, characterSet, width = 48, initialize = true, debug = false, children } = elem.props;
  const printer = (0, import_printer.getPrinter)({ type, characterSet });
  if (characterSet != null) {
    printer.setCharacterSet(characterSet);
  }
  await print(children, { printer, width });
  if (initialize) {
    printer.initialize();
  }
  if (debug) {
    printer.debug();
  }
  return printer.getData();
}
async function print(node, context) {
  for (const child of import_react2.Children.toArray(node)) {
    if (!(0, import_react2.isValidElement)(child)) {
      continue;
    }
    if (isPrintable(child.type)) {
      await child.type.print(child, context);
      resetPrinter(context.printer);
    } else {
      await print(child.props.children, context);
    }
  }
}
//# sourceMappingURL=index.js.map
