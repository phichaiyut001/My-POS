var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/index.ts
var src_exports = {};
__export(src_exports, {
  EpsonPrinter: () => EpsonPrinter,
  StarPrinter: () => StarPrinter,
  getPrinter: () => getPrinter
});
module.exports = __toCommonJS(src_exports);

// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/BasePrinter.ts
var import_image = require("@react-thermal-printer/image");

// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/common.ts
var LF = 10;
var ESC = 27;
var GS = 29;

// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/alignment.ts
function alignment(n) {
  return [ESC, 97, n];
}

// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/barcodeHRIFont.ts
function barcodeHRIFont(n) {
  return [GS, 102, n];
}

// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/barcodeHRIPosition.ts
function barcodeHRIPosition(n = 0) {
  return [GS, 72, n];
}

// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/barcodeHeight.ts
function barcodeHeight(n) {
  return [GS, 104, n];
}

// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/barcodePrint.ts
function barcodePrint(m, n, data) {
  const base = [GS, 107, m, n];
  return base.concat(Array.from(data));
}

// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/barcodeWidth.ts
function barcodeWidth(n) {
  return [GS, 119, n];
}

// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/cashdraw.ts
function cashdraw(m, t1, t2) {
  return [ESC, 112, m, t1, t2];
}

// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/characterCodeTable.ts
function characterCodeTable(n) {
  return [ESC, 116, n];
}

// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/internationalCharacterSet.ts
function internationalCharacterSet(n) {
  return [ESC, 82, n];
}

// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/characterSet.ts
var characterSetValues = {
  pc437_usa: 0,
  pc850_multilingual: 2,
  pc860_portuguese: 3,
  pc863_canadian_french: 4,
  pc865_nordic: 5,
  pc851_greek: 11,
  pc857_turkish: 12,
  pc737_greek: 14,
  iso8859_7_greek: 15,
  wpc1252: 16,
  pc866_cyrillic2: 17,
  pc852_latin2: 18,
  slovenia: 18,
  pc858_euro: 19,
  wpc775_baltic_rim: 33,
  pc855_cyrillic: 34,
  pc861_icelandic: 35,
  pc862_hebrew: 36,
  pc864_arabic: 37,
  pc869_greek: 38,
  iso8859_2_latin2: 39,
  iso8859_15_latin9: 40,
  pc1125_ukranian: 44,
  wpc1250_latin2: 45,
  wpc1251_cyrillic: 46,
  wpc1253_greek: 47,
  wpc1254_turkish: 48,
  wpc1255_hebrew: 49,
  wpc1256_arabic: 50,
  wpc1257_baltic_rim: 51,
  wpc1258_vietnamese: 52,
  kz1048_kazakhstan: 53,
  japan: 8,
  korea: 13,
  china: 15,
  hk_tw: 0
};
function characterSet(set) {
  const n = characterSetValues[set];
  if (set === "japan" || set === "korea" || set === "china" || set === "hk_tw") {
    return internationalCharacterSet(n);
  }
  return characterCodeTable(n);
}

// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/cut.ts
function cut(m, n) {
  const cmd = [GS, 86, m];
  if (n != null) {
    cmd.push(n);
  }
  return cmd;
}

// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/image.ts
function image(m, xL, xH, yL, yH, data) {
  const base = [GS, 118, 48, m, xL, xH, yL, yH];
  return base.concat(Array.from(data));
}

// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/initialize.ts
function initialize() {
  return [ESC, 64];
}

// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/invert.ts
function invert(n) {
  return [GS, 66, n];
}

// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/qrcodeCellSize.ts
function qrcodeCellSize(n) {
  return [GS, 40, 107, 3, 0, 49, 67, n];
}

// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/qrcodeCorrectionLevel.ts
function qrcodeCorrectionLevel(n = 48) {
  return [GS, 40, 107, 3, 0, 49, 69, n];
}

// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/qrcodeModel.ts
function qrcodeModel(n1 = 50, n2 = 0) {
  return [GS, 40, 107, 4, 0, 49, 65, n1, n2];
}

// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/qrcodePrint.ts
function qrcodePrint() {
  return [GS, 40, 107, 3, 0, 49, 81, 48];
}

// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/qrcodeStore.ts
function qrcodeStore(pL, pH, data) {
  const base = [GS, 40, 107, pL, pH, 49, 80, 48];
  return base.concat(Array.from(data));
}

// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/textBold.ts
function textBold(n) {
  return [ESC, 69, n];
}

// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/textFont.ts
function textFont(n) {
  return [ESC, 77, n];
}

// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/textMode.ts
function textMode(n) {
  return [ESC, 33, n];
}

// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/textSize.ts
function textSize(n) {
  return [GS, 33, n];
}

// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/textUnderline.ts
function textUnderline(n) {
  return [ESC, 45, n];
}

// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/encode.ts
var import_iconv_lite = require("iconv-lite");
function encode(text, characterSet2) {
  return (0, import_iconv_lite.encode)(text, encoding[characterSet2]);
}
var encoding = {
  pc437_usa: "CP437",
  pc850_multilingual: "CP850",
  pc860_portuguese: "CP860",
  pc863_canadian_french: "CP863",
  pc865_nordic: "CP865",
  pc851_greek: "CP860",
  pc857_turkish: "CP857",
  pc737_greek: "CP737",
  iso8859_7_greek: "ISO-8859-7",
  wpc1252: "CP1252",
  pc866_cyrillic2: "CP866",
  pc852_latin2: "CP852",
  slovenia: "CP852",
  pc858_euro: "CP858",
  wpc775_baltic_rim: "CP775",
  pc855_cyrillic: "CP855",
  pc861_icelandic: "CP861",
  pc862_hebrew: "CP862",
  pc864_arabic: "CP864",
  pc869_greek: "CP869",
  iso8859_2_latin2: "ISO-8859-2",
  iso8859_15_latin9: "ISO-8859-15",
  pc1125_ukranian: "CP1125",
  wpc1250_latin2: "WIN1250",
  wpc1251_cyrillic: "WIN1251",
  wpc1253_greek: "WIN1253",
  wpc1254_turkish: "WIN1254",
  wpc1255_hebrew: "WIN1255",
  wpc1256_arabic: "WIN1256",
  wpc1257_baltic_rim: "WIN1257",
  wpc1258_vietnamese: "WIN1258",
  kz1048_kazakhstan: "RK1048",
  japan: "EUC-JP",
  korea: "EUC-KR",
  china: "EUC-CN",
  hk_tw: "Big5-HKSCS"
};

// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/BasePrinter.ts
var BasePrinter = class {
  constructor(options) {
    this.cmds = [];
    this.characterSet = options?.characterSet ?? "pc437_usa";
  }
  setCharacterSet(set) {
    this.characterSet = set;
    this.cmds.push({
      name: "setCharacterSet",
      args: [set],
      data: characterSet(set)
    });
    return this;
  }
  setTextFont(font) {
    const n = (() => {
      switch (font) {
        case "A":
          return 0;
        case "B":
          return 1;
        case "C":
          return 2;
        case "D":
          return 3;
        case "E":
          return 4;
        case "special-A":
          return 97;
        case "special-B":
          return 98;
      }
    })();
    this.cmds.push({
      name: "setTextFont",
      args: [font],
      data: textFont(n)
    });
    return this;
  }
  setTextBold(bold) {
    this.cmds.push({
      name: "setTextBold",
      args: [bold],
      data: textBold(bold ? 1 : 0)
    });
    return this;
  }
  setTextUnderline(underline) {
    const n = (() => {
      switch (underline) {
        case "1dot-thick":
          return 1;
        case "2dot-thick":
          return 2;
        case "none":
          return 0;
      }
    })();
    this.cmds.push({
      name: "setTextUnderline",
      args: [underline],
      data: textUnderline(n)
    });
    return this;
  }
  setTextSize(width, height) {
    const w = (width - 1) * 16;
    const h = height - 1;
    const n = w + h;
    this.cmds.push({
      name: "setTextSize",
      args: [width, height],
      data: textSize(n)
    });
    return this;
  }
  setTextNormal() {
    this.cmds.push({
      name: "setTextNormal",
      data: textMode(0)
    });
    return this;
  }
  setAlign(align) {
    const n = (() => {
      switch (align) {
        case "left":
          return 0;
        case "center":
          return 1;
        case "right":
          return 2;
      }
    })();
    this.cmds.push({
      name: "setAlign",
      args: [align],
      data: alignment(n)
    });
    return this;
  }
  invert(enabled) {
    this.cmds.push({
      name: "invert",
      args: [enabled],
      data: invert(enabled ? 1 : 0)
    });
    return this;
  }
  text(data) {
    this.cmds.push({
      name: "text",
      args: [data],
      data: Array.from(encode(data, this.characterSet))
    });
    return this;
  }
  raw(data) {
    this.cmds.push({
      name: "raw",
      args: [data],
      data: Array.from(data)
    });
    return this;
  }
  newLine() {
    this.cmds.push({
      name: "newLine",
      data: [LF]
    });
    return this;
  }
  cut() {
    this.cmds.push({
      name: "cut",
      data: cut(48)
    });
    return this;
  }
  image(img, options) {
    const size = new ArrayBuffer(4);
    const view = new DataView(size);
    view.setUint16(0, Math.ceil(img.width / 8), true);
    view.setUint16(2, img.height, true);
    const [xL, xH, yL, yH] = [...new Uint8Array(size).values()];
    this.cmds.push({
      name: "image",
      args: [img.data.byteLength, img.width, img.height],
      data: image(0, xL, xH, yL, yH, (0, import_image.imageToRaster)(img, options))
    });
    return this;
  }
  qrcode(data, options = {}) {
    const { model = "model2", cellSize = 3, correction = "L" } = options;
    const modelValue = (() => {
      switch (model) {
        case "model1":
          return 49;
        case "model2":
          return 50;
        case "micro":
          return 51;
      }
    })();
    this.cmds.push({
      name: "qrcodeModel",
      args: [model],
      data: qrcodeModel(modelValue)
    });
    this.cmds.push({
      name: "qrcodeCellSize",
      args: [cellSize],
      data: qrcodeCellSize(cellSize)
    });
    const correctionValue = (() => {
      switch (correction) {
        case "L":
          return 48;
        case "M":
          return 49;
        case "Q":
          return 50;
        case "H":
          return 51;
      }
    })();
    this.cmds.push({
      name: "qrcodeCorrection",
      args: [correction],
      data: qrcodeCorrectionLevel(correctionValue)
    });
    const encoded = encode(data, "pc437_usa");
    const length = new ArrayBuffer(2);
    const view = new DataView(length);
    view.setUint16(0, encoded.byteLength + 3, true);
    const pL = view.getUint8(0);
    const pH = view.getUint8(1);
    this.cmds.push({
      name: "qrcodeStore",
      args: [data],
      data: qrcodeStore(pL, pH, encoded)
    });
    this.cmds.push({
      name: "qrcodePrint",
      data: qrcodePrint()
    });
    return this;
  }
  barcode(data, type, options = {}) {
    const { hriPosition = "none", hriFont = "A", width = 3, height = 162 } = options;
    const hriPositionValue = (() => {
      switch (hriPosition) {
        case "none":
          return 0;
        case "top":
          return 1;
        case "bottom":
          return 2;
        case "top-bottom":
          return 3;
      }
    })();
    this.cmds.push({
      name: "barcodeHRIPosition",
      args: [hriPosition],
      data: barcodeHRIPosition(hriPositionValue)
    });
    const hriFontValue = (() => {
      switch (hriFont) {
        case "A":
          return 0;
        case "B":
          return 1;
        case "C":
          return 2;
        case "D":
          return 3;
        case "E":
          return 4;
        case "special-A":
          return 97;
        case "special-B":
          return 98;
      }
    })();
    this.cmds.push({
      name: "barcodeHRIFont",
      args: [hriFont],
      data: barcodeHRIFont(hriFontValue)
    });
    this.cmds.push({
      name: "barcodeWidth",
      args: [width],
      data: barcodeWidth(width)
    });
    this.cmds.push({
      name: "barcodeHeight",
      args: [height],
      data: barcodeHeight(height)
    });
    const typeValue = (() => {
      switch (type) {
        case "UPC-A":
          return 65;
        case "UPC-E":
          return 66;
        case "JAN13":
          return 67;
        case "JAN8":
          return 68;
        case "CODE39":
          return 69;
        case "ITF":
          return 70;
        case "CODABAR":
          return 71;
        case "CODE93":
          return 72;
        case "CODE128":
          return 73;
        case "GS1-128":
          return 74;
        case "GS1 (DataBar Omnidirectional)":
          return 75;
        case "GS1 (DataBar Truncated)":
          return 76;
        case "GS1 (DataBar Limited)":
          return 77;
        case "GS1 (DataBar Expanded)":
          return 78;
      }
    })();
    const encoded = encode(data, "pc437_usa");
    this.cmds.push({
      name: "barcodePrint",
      args: [data, type],
      data: barcodePrint(typeValue, encoded.byteLength, encoded)
    });
    return this;
  }
  cashdraw(pin) {
    const m = (() => {
      switch (pin) {
        case "2pin":
          return 0;
        case "5pin":
          return 1;
      }
    })();
    this.cmds.push({
      name: "cashdraw",
      args: [pin],
      data: cashdraw(m, 25, 120)
    });
    return this;
  }
  initialize() {
    this.cmds.push({
      name: "initialize",
      data: initialize()
    });
    return this;
  }
  getData() {
    const data = this.cmds.flatMap((x) => x.data);
    return new Uint8Array(data);
  }
  clear() {
    this.cmds = [];
    return this;
  }
  debug() {
    console.debug(this.cmds);
    return this;
  }
};

// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/EpsonPrinter.ts
var EpsonPrinter = class extends BasePrinter {
  constructor(options) {
    super(options);
  }
};

// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/starQRCodeCellSize.ts
function starQRCodeCellSize(n = 3) {
  return [ESC, GS, 121, 83, 50, n];
}

// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/starQRCodeCorrectionLevel.ts
function starQRCodeCorrectionLevel(n = 0) {
  return [ESC, GS, 121, 83, 49, n];
}

// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/starQRCodeModel.ts
function starQRCodeModel(n = 2) {
  return [ESC, GS, 121, 83, 48, n];
}

// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/starQRCodePrint.ts
function starQRCodePrint() {
  return [ESC, GS, 121, 80];
}

// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/starQRCodeStore.ts
function starQRCodeStore(nL, nH, data) {
  const base = [ESC, GS, 121, 68, 49, 0, nL, nH];
  return base.concat(Array.from(data));
}

// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/StarPrinter.ts
var StarPrinter = class extends BasePrinter {
  constructor(options) {
    super(options);
  }
  qrcode(data, options = {}) {
    const { model = "model2", cellSize = 3, correction = "L" } = options;
    const modelValue = (() => {
      switch (model) {
        case "model1":
          return 1;
        case "model2":
          return 2;
        case "micro":
          return 3;
      }
    })();
    this.cmds.push({
      name: "qrcodeModel",
      args: [model],
      data: starQRCodeModel(modelValue)
    });
    this.cmds.push({
      name: "qrcodeCellSize",
      args: [cellSize],
      data: starQRCodeCellSize(cellSize)
    });
    const correctionValue = (() => {
      switch (correction) {
        case "L":
          return 0;
        case "M":
          return 1;
        case "Q":
          return 2;
        case "H":
          return 3;
      }
    })();
    this.cmds.push({
      name: "qrcodeCorrection",
      args: [correction],
      data: starQRCodeCorrectionLevel(correctionValue)
    });
    const encoded = encode(data, "pc437_usa");
    const length = new ArrayBuffer(2);
    const view = new DataView(length);
    view.setUint16(0, encoded.byteLength, true);
    const pL = view.getUint8(0);
    const pH = view.getUint8(1);
    this.cmds.push({
      name: "qrcodeStore",
      args: [data],
      data: starQRCodeStore(pL, pH, encoded)
    });
    this.cmds.push({
      name: "qrcodePrint",
      data: starQRCodePrint()
    });
    return this;
  }
};

// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/index.ts
function getPrinter({ type, ...options }) {
  switch (type) {
    case "epson":
      return new EpsonPrinter(options);
    case "star":
      return new StarPrinter(options);
  }
}
//# sourceMappingURL=index.js.map
