{
  "version": 3,
  "sources": ["pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/index.ts", "pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/BasePrinter.ts", "pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/common.ts", "pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/alignment.ts", "pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/barcodeHRIFont.ts", "pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/barcodeHRIPosition.ts", "pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/barcodeHeight.ts", "pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/barcodePrint.ts", "pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/barcodeWidth.ts", "pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/cashdraw.ts", "pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/characterCodeTable.ts", "pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/internationalCharacterSet.ts", "pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/characterSet.ts", "pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/cut.ts", "pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/image.ts", "pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/initialize.ts", "pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/invert.ts", "pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/qrcodeCellSize.ts", "pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/qrcodeCorrectionLevel.ts", "pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/qrcodeModel.ts", "pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/qrcodePrint.ts", "pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/qrcodeStore.ts", "pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/textBold.ts", "pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/textFont.ts", "pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/textMode.ts", "pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/textSize.ts", "pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/textUnderline.ts", "pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/encode.ts", "pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/EpsonPrinter.ts", "pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/starQRCodeCellSize.ts", "pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/starQRCodeCorrectionLevel.ts", "pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/starQRCodeModel.ts", "pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/starQRCodePrint.ts", "pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/starQRCodeStore.ts", "pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/StarPrinter.ts"],
  "sourcesContent": ["import { CharacterSet } from './CharacterSet';\nimport { EpsonPrinter } from './EpsonPrinter';\nimport { Printer } from './Printer';\nimport { StarPrinter } from './StarPrinter';\n\nexport type PrinterType = 'epson' | 'star';\n\nexport interface PrinterOptions {\n  type: PrinterType;\n  characterSet?: CharacterSet;\n}\n\nexport function getPrinter({ type, ...options }: PrinterOptions): Printer {\n  switch (type) {\n    case 'epson':\n      return new EpsonPrinter(options);\n    case 'star':\n      return new StarPrinter(options);\n  }\n}\n\nexport type { CharacterSet } from './CharacterSet';\nexport * from './Printer';\nexport { EpsonPrinter } from './EpsonPrinter';\nexport { StarPrinter } from './StarPrinter';\n", "import { Image, imageToRaster, ImageToRasterOptions } from '@react-thermal-printer/image';\nimport { CharacterSet } from './CharacterSet';\nimport {\n  Align,\n  BarcodeOptions,\n  BarcodeType,\n  CashDrawerPin,\n  Printer,\n  QRCodeOptions,\n  TextFont,\n  TextSize,\n  TextUnderline,\n} from './Printer';\nimport { alignment } from './commands/alignment';\nimport { barcodeHRIFont } from './commands/barcodeHRIFont';\nimport { barcodeHRIPosition } from './commands/barcodeHRIPosition';\nimport { barcodeHeight } from './commands/barcodeHeight';\nimport { barcodePrint } from './commands/barcodePrint';\nimport { barcodeWidth } from './commands/barcodeWidth';\nimport { cashdraw } from './commands/cashdraw';\nimport { characterSet } from './commands/characterSet';\nimport { LF } from './commands/common';\nimport { cut } from './commands/cut';\nimport { image } from './commands/image';\nimport { initialize } from './commands/initialize';\nimport { invert } from './commands/invert';\nimport { qrcodeCellSize } from './commands/qrcodeCellSize';\nimport { qrcodeCorrectionLevel } from './commands/qrcodeCorrectionLevel';\nimport { qrcodeModel } from './commands/qrcodeModel';\nimport { qrcodePrint } from './commands/qrcodePrint';\nimport { qrcodeStore } from './commands/qrcodeStore';\nimport { textBold } from './commands/textBold';\nimport { textFont } from './commands/textFont';\nimport { textMode } from './commands/textMode';\nimport { textSize } from './commands/textSize';\nimport { textUnderline } from './commands/textUnderline';\nimport { encode } from './encode';\n\nexport interface BasePrinterOptions {\n  characterSet?: CharacterSet;\n}\n\ninterface Cmd {\n  name: string;\n  args?: unknown[];\n  data: number[];\n}\n\nexport abstract class BasePrinter implements Printer {\n  protected cmds: Cmd[] = [];\n  protected characterSet: CharacterSet;\n\n  protected constructor(options?: BasePrinterOptions) {\n    this.characterSet = options?.characterSet ?? 'pc437_usa';\n  }\n\n  setCharacterSet(set: CharacterSet): this {\n    this.characterSet = set;\n    this.cmds.push({\n      name: 'setCharacterSet',\n      args: [set],\n      data: characterSet(set),\n    });\n    return this;\n  }\n\n  setTextFont(font: TextFont): this {\n    const n = (() => {\n      switch (font) {\n        case 'A':\n          return 0;\n        case 'B':\n          return 1;\n        case 'C':\n          return 2;\n        case 'D':\n          return 3;\n        case 'E':\n          return 4;\n        case 'special-A':\n          return 97;\n        case 'special-B':\n          return 98;\n      }\n    })();\n\n    this.cmds.push({\n      name: 'setTextFont',\n      args: [font],\n      data: textFont(n),\n    });\n    return this;\n  }\n\n  setTextBold(bold: boolean): this {\n    this.cmds.push({\n      name: 'setTextBold',\n      args: [bold],\n      data: textBold(bold ? 1 : 0),\n    });\n    return this;\n  }\n\n  setTextUnderline(underline: TextUnderline): this {\n    const n = (() => {\n      switch (underline) {\n        case '1dot-thick':\n          return 1;\n        case '2dot-thick':\n          return 2;\n        case 'none':\n          return 0;\n      }\n    })();\n\n    this.cmds.push({\n      name: 'setTextUnderline',\n      args: [underline],\n      data: textUnderline(n),\n    });\n    return this;\n  }\n\n  setTextSize(width: TextSize, height: TextSize): this {\n    const w = (width - 1) * 16;\n    const h = height - 1;\n    const n = w + h;\n\n    this.cmds.push({\n      name: 'setTextSize',\n      args: [width, height],\n      data: textSize(n),\n    });\n    return this;\n  }\n\n  setTextNormal(): this {\n    this.cmds.push({\n      name: 'setTextNormal',\n      data: textMode(0),\n    });\n    return this;\n  }\n\n  setAlign(align: Align): this {\n    const n = (() => {\n      switch (align) {\n        case 'left':\n          return 0;\n        case 'center':\n          return 1;\n        case 'right':\n          return 2;\n      }\n    })();\n\n    this.cmds.push({\n      name: 'setAlign',\n      args: [align],\n      data: alignment(n),\n    });\n    return this;\n  }\n\n  invert(enabled: boolean): this {\n    this.cmds.push({\n      name: 'invert',\n      args: [enabled],\n      data: invert(enabled ? 1 : 0),\n    });\n    return this;\n  }\n\n  text(data: string): this {\n    this.cmds.push({\n      name: 'text',\n      args: [data],\n      data: Array.from(encode(data, this.characterSet)),\n    });\n    return this;\n  }\n\n  raw(data: Uint8Array): this {\n    this.cmds.push({\n      name: 'raw',\n      args: [data],\n      data: Array.from(data),\n    });\n    return this;\n  }\n\n  newLine(): this {\n    this.cmds.push({\n      name: 'newLine',\n      data: [LF],\n    });\n    return this;\n  }\n\n  cut(): this {\n    this.cmds.push({\n      name: 'cut',\n      data: cut(48),\n    });\n    return this;\n  }\n\n  image(img: Image, options?: ImageToRasterOptions): this {\n    const size = new ArrayBuffer(4);\n    const view = new DataView(size);\n    view.setUint16(0, Math.ceil(img.width / 8), true);\n    view.setUint16(2, img.height, true);\n\n    const [xL, xH, yL, yH] = [...new Uint8Array(size).values()] as [number, number, number, number];\n\n    this.cmds.push({\n      name: 'image',\n      args: [img.data.byteLength, img.width, img.height],\n      data: image(0, xL, xH, yL, yH, imageToRaster(img, options)),\n    });\n    return this;\n  }\n\n  qrcode(data: string, options: QRCodeOptions = {}): this {\n    const { model = 'model2', cellSize = 3, correction = 'L' } = options;\n    const modelValue = (() => {\n      switch (model) {\n        case 'model1':\n          return 49;\n        case 'model2':\n          return 50;\n        case 'micro':\n          return 51;\n      }\n    })();\n    this.cmds.push({\n      name: 'qrcodeModel',\n      args: [model],\n      data: qrcodeModel(modelValue),\n    });\n\n    this.cmds.push({\n      name: 'qrcodeCellSize',\n      args: [cellSize],\n      data: qrcodeCellSize(cellSize),\n    });\n\n    const correctionValue = (() => {\n      switch (correction) {\n        case 'L':\n          return 48;\n        case 'M':\n          return 49;\n        case 'Q':\n          return 50;\n        case 'H':\n          return 51;\n      }\n    })();\n    this.cmds.push({\n      name: 'qrcodeCorrection',\n      args: [correction],\n      data: qrcodeCorrectionLevel(correctionValue),\n    });\n\n    const encoded = encode(data, 'pc437_usa'); // ascii\n    const length = new ArrayBuffer(2);\n    const view = new DataView(length);\n    view.setUint16(0, encoded.byteLength + 3, true);\n\n    const pL = view.getUint8(0);\n    const pH = view.getUint8(1);\n\n    this.cmds.push({\n      name: 'qrcodeStore',\n      args: [data],\n      data: qrcodeStore(pL, pH, encoded),\n    });\n    this.cmds.push({\n      name: 'qrcodePrint',\n      data: qrcodePrint(),\n    });\n\n    return this;\n  }\n\n  barcode(data: string, type: BarcodeType, options: BarcodeOptions = {}): this {\n    const { hriPosition = 'none', hriFont = 'A', width = 3, height = 162 } = options;\n    const hriPositionValue = (() => {\n      switch (hriPosition) {\n        case 'none':\n          return 0;\n        case 'top':\n          return 1;\n        case 'bottom':\n          return 2;\n        case 'top-bottom':\n          return 3;\n      }\n    })();\n    this.cmds.push({\n      name: 'barcodeHRIPosition',\n      args: [hriPosition],\n      data: barcodeHRIPosition(hriPositionValue),\n    });\n\n    const hriFontValue = (() => {\n      switch (hriFont) {\n        case 'A':\n          return 0;\n        case 'B':\n          return 1;\n        case 'C':\n          return 2;\n        case 'D':\n          return 3;\n        case 'E':\n          return 4;\n        case 'special-A':\n          return 97;\n        case 'special-B':\n          return 98;\n      }\n    })();\n    this.cmds.push({\n      name: 'barcodeHRIFont',\n      args: [hriFont],\n      data: barcodeHRIFont(hriFontValue),\n    });\n\n    this.cmds.push({\n      name: 'barcodeWidth',\n      args: [width],\n      data: barcodeWidth(width),\n    });\n    this.cmds.push({\n      name: 'barcodeHeight',\n      args: [height],\n      data: barcodeHeight(height),\n    });\n\n    const typeValue = (() => {\n      switch (type) {\n        case 'UPC-A':\n          return 65;\n        case 'UPC-E':\n          return 66;\n        case 'JAN13':\n          return 67;\n        case 'JAN8':\n          return 68;\n        case 'CODE39':\n          return 69;\n        case 'ITF':\n          return 70;\n        case 'CODABAR':\n          return 71;\n        case 'CODE93':\n          return 72;\n        case 'CODE128':\n          return 73;\n        case 'GS1-128':\n          return 74;\n        case 'GS1 (DataBar Omnidirectional)':\n          return 75;\n        case 'GS1 (DataBar Truncated)':\n          return 76;\n        case 'GS1 (DataBar Limited)':\n          return 77;\n        case 'GS1 (DataBar Expanded)':\n          return 78;\n      }\n    })();\n    const encoded = encode(data, 'pc437_usa'); // ascii\n    this.cmds.push({\n      name: 'barcodePrint',\n      args: [data, type],\n      data: barcodePrint(typeValue, encoded.byteLength, encoded),\n    });\n\n    return this;\n  }\n\n  cashdraw(pin: CashDrawerPin): this {\n    const m = (() => {\n      switch (pin) {\n        case '2pin':\n          return 0;\n        case '5pin':\n          return 1;\n      }\n    })();\n\n    this.cmds.push({\n      name: 'cashdraw',\n      args: [pin],\n      data: cashdraw(m, 0x19, 0x78),\n    });\n\n    return this;\n  }\n\n  initialize(): this {\n    this.cmds.push({\n      name: 'initialize',\n      data: initialize(),\n    });\n    return this;\n  }\n\n  getData(): Uint8Array {\n    const data = this.cmds.flatMap(x => x.data);\n    return new Uint8Array(data);\n  }\n\n  clear(): this {\n    this.cmds = [];\n    return this;\n  }\n\n  debug(): this {\n    // eslint-disable-next-line no-console\n    console.debug(this.cmds);\n    return this;\n  }\n}\n", "export const LF = 0x0a;\nexport const ESC = 0x1b;\nexport const GS = 0x1d;\n", "import { ESC } from './common';\n\n/**\n * Select justification\n * | Format   | Value    |\n * |---------|----------|\n * | ASCII   | ESC a n  |\n * | Hex     | 1B 61 n  |\n * | Decimal | 27 97 n  |\n *\n * @see https://reference.epson-biz.com/modules/ref_escpos/index.php?content_id=58\n */\nexport function alignment(n: number) {\n  return [ESC, 0x61, n];\n}\n", "import { GS } from './common';\n\n/**\n * Select font for HRI characters\n * | Format  | Value      |\n * |---------|------------|\n * | ASCII   | GS   f   n |\n * | Hex     | 1D  66   n |\n * | Decimal | 29 102   n |\n *\n * | n     | Font of HRI characters           |\n * |-------|----------------------------------|\n * | 0, 48 | Font A                           |\n * | 1, 49 | Font B                           |\n * | 2, 50 | Font C                           |\n * | 3, 51 | Font D                           |\n * | 4, 52 | Font E                           |\n * | 97    | Special A                        |\n * | 98    | Special B                        |\n *\n * @see https://www.epson-biz.com/modules/ref_escpos/index.php?content_id=126\n */\nexport function barcodeHRIFont(n: number) {\n  return [GS, 0x66, n];\n}\n", "import { GS } from './common';\n\n/**\n * Select print position of HRI characters\n * | Format  | Value      |\n * |---------|------------|\n * | ASCII   | GS   H   n |\n * | Hex     | 1D  48   n |\n * | Decimal | 29  72   n |\n *\n * | n     | Print Position                   |\n * |-------|----------------------------------|\n * | 0, 48 | Not Printed                      |\n * | 1, 49 | Above the barcode                |\n * | 2, 50 | Below the barcode                |\n * | 3, 51 | Both above and below the barcode |\n *\n * @default n = 0\n * @see https://www.epson-biz.com/modules/ref_escpos/index.php?content_id=125\n */\nexport function barcodeHRIPosition(n = 0) {\n  return [GS, 0x48, n];\n}\n", "import { GS } from './common';\n\n/**\n * Set barcode height\n * | Format  | Value      |\n * |---------|------------|\n * | ASCII   | GS   h   n |\n * | Hex     | 1D  68   n |\n * | Decimal | 29 104   n |\n *\n * @see https://www.epson-biz.com/modules/ref_escpos/index.php?content_id=127\n */\nexport function barcodeHeight(n: number) {\n  return [GS, 0x68, n];\n}\n", "import { GS } from './common';\n\n/**\n * Print barcode\n * | Format  | Value                    |\n * |---------|--------------------------|\n * | ASCII   | GS   k   m   n   d1...dn |\n * | Hex     | 1D  6B   m   n   d1...dn |\n * | Decimal | 29 107   m   n   d1...dn |\n *\n * @see https://www.epson-biz.com/modules/ref_escpos/index.php?content_id=128\n */\nexport function barcodePrint(m: number, n: number, data: ArrayLike<number>) {\n  const base = [GS, 0x6b, m, n];\n  return base.concat(Array.from(data));\n}\n", "import { GS } from './common';\n\n/**\n * Set barcode width\n * | Format  | Value      |\n * |---------|------------|\n * | ASCII   | GS   w   n |\n * | Hex     | 1D  77   n |\n * | Decimal | 29 119   n |\n *\n * @see https://www.epson-biz.com/modules/ref_escpos/index.php?content_id=129\n */\nexport function barcodeWidth(n: number) {\n  return [GS, 0x77, n];\n}\n", "import { ESC } from './common';\n\n/**\n * Generate pulse\n * | Format  | Value                |\n * |---------|----------------------|\n * | ASCII   | ESC   p   m  t1   t2 |\n * | Hex     |  1B  70   m  t1   t2 |\n * | Decimal |  27  27   m  t1   t2 |\n *\n * @see https://www.epson-biz.com/modules/ref_escpos/index.php?content_id=195\n */\nexport function cashdraw(m: number, t1: number, t2: number) {\n  return [ESC, 0x70, m, t1, t2];\n}\n", "import { ESC } from './common';\n\n/**\n * Select character code table\n * | Format   | Value     |\n * |---------|-----------|\n * | ASCII   | ESC t n   |\n * | Hex     | 1B 74 n   |\n * | Decimal | 27 116 n  |\n *\n * @see https://reference.epson-biz.com/modules/ref_escpos/index.php?content_id=32\n */\nexport function characterCodeTable(n: number) {\n  return [ESC, 0x74, n];\n}\n", "import { ESC } from './common';\n\n/**\n * Select an international character set\n * | Format   | Value    |\n * |---------|----------|\n * | ASCII   | ESC R n  |\n * | Hex     | 1B 52 n  |\n * | Decimal | 27 82 n  |\n *\n * @see https://reference.epson-biz.com/modules/ref_escpos/index.php?content_id=29\n */\nexport function internationalCharacterSet(n: number) {\n  return [ESC, 0x52, n];\n}\n", "import { CharacterSet } from '../CharacterSet';\nimport { characterCodeTable } from './characterCodeTable';\nimport { internationalCharacterSet } from './internationalCharacterSet';\n\nconst characterSetValues: Record<CharacterSet, number> = {\n  // code table\n  pc437_usa: 0,\n  pc850_multilingual: 2,\n  pc860_portuguese: 3,\n  pc863_canadian_french: 4,\n  pc865_nordic: 5,\n  pc851_greek: 11,\n  pc857_turkish: 12,\n  pc737_greek: 14,\n  iso8859_7_greek: 15,\n  wpc1252: 16,\n  pc866_cyrillic2: 17,\n  pc852_latin2: 18,\n  slovenia: 18,\n  pc858_euro: 19,\n  wpc775_baltic_rim: 33,\n  pc855_cyrillic: 34,\n  pc861_icelandic: 35,\n  pc862_hebrew: 36,\n  pc864_arabic: 37,\n  pc869_greek: 38,\n  iso8859_2_latin2: 39,\n  iso8859_15_latin9: 40,\n  pc1125_ukranian: 44,\n  wpc1250_latin2: 45,\n  wpc1251_cyrillic: 46,\n  wpc1253_greek: 47,\n  wpc1254_turkish: 48,\n  wpc1255_hebrew: 49,\n  wpc1256_arabic: 50,\n  wpc1257_baltic_rim: 51,\n  wpc1258_vietnamese: 52,\n  kz1048_kazakhstan: 53,\n  // international\n  japan: 0x08,\n  korea: 0x0d,\n  china: 0x0f,\n  hk_tw: 0x00,\n};\n\nexport function characterSet(set: CharacterSet) {\n  const n = characterSetValues[set];\n\n  if (set === 'japan' || set === 'korea' || set === 'china' || set === 'hk_tw') {\n    return internationalCharacterSet(n);\n  }\n  return characterCodeTable(n);\n}\n", "import { GS } from './common';\n\n/**\n * Select cut mode and cut paper\n * <Function A>\n * | Format   | Value    |\n * |---------|----------|\n * | ASCII   | GS V m  |\n * | Hex     | 1D 56 m |\n * | Decimal | 29 86 m |\n *\n * <Function B, C, D>\n * | Format   | Value    |\n * |---------|-----------|\n * | ASCII   | GS V m n  |\n * | Hex     | 1D 56 m n |\n * | Decimal | 29 86 m n |\n *\n * @see https://www.epson-biz.com/modules/ref_escpos/index.php?content_id=87\n */\nexport function cut(m: number, n?: number) {\n  const cmd = [GS, 0x56, m];\n  if (n != null) {\n    cmd.push(n);\n  }\n  return cmd;\n}\n", "import { GS } from './common';\n\n/**\n * Print raster bit image\n * | Format   | Value                          |\n * |---------|---------------------------------|\n * | ASCII   | GS v 0 m xL xH yL yH d1...dk    |\n * | Hex     | 1D 76 30 m xL xH yL yH d1...dk  |\n * | Decimal | 29 118 48 m xL xH yL yH d1...dk |\n *\n * @see https://reference.epson-biz.com/modules/ref_escpos/index.php?content_id=94\n */\nexport function image(\n  m: number,\n  xL: number,\n  xH: number,\n  yL: number,\n  yH: number,\n  data: ArrayLike<number>\n) {\n  const base = [GS, 0x76, 0x30, m, xL, xH, yL, yH];\n  return base.concat(Array.from(data));\n}\n", "import { ESC } from './common';\n\n/**\n * Initialize printer\n * | Format   | Value   |\n * |---------|------- --|\n * | ASCII   | ESC @   |\n * | Hex     | 1B 40   |\n * | Decimal | 27 64   |\n *\n * @see https://reference.epson-biz.com/modules/ref_escpos/index.php?content_id=192\n */\nexport function initialize() {\n  return [ESC, 0x40];\n}\n", "import { GS } from './common';\n\n/**\n * Specify/cancel white/black inverted printing\n * | Format   | Value    |\n * |---------|----------|\n * | ASCII   | GS b n   |\n * | Hex     | 1D 42 n  |\n * | Decimal | 29 66 n  |\n *\n * @see https://reference.epson-biz.com/modules/ref_escpos/index.php?content_id=25\n */\nexport function invert(n: number) {\n  return [GS, 0x42, n];\n}\n", "import { GS } from './common';\n\n/**\n * QR Code: Set the size of module\n * | Format   | Value                        |\n * |---------|-------------------------------|\n * | ASCII   | GS   (   k  pL  pH  cn  fn  n |\n * | Hex     | 1D  28  6B  03  00  31  43  n |\n * | Decimal | 29  40 107   3   0  49  67  n |\n *\n * @see https://reference.epson-biz.com/modules/ref_escpos/index.php?content_id=141\n */\nexport function qrcodeCellSize(n: number) {\n  return [GS, 0x28, 0x6b, 0x03, 0x00, 0x31, 0x43, n];\n}\n", "import { GS } from './common';\n\n/**\n * QR Code: Select the error correction level\n * | Format   | Value                        |\n * |---------|-------------------------------|\n * | ASCII   | GS   (   k  pL  pH  cn  fn  n |\n * | Hex     | 1D  28  6B  03  00  31  45  n |\n * | Decimal | 29  40 107   0   0  49  69  n |\n *\n * @default n = 48\n * @see https://reference.epson-biz.com/modules/ref_escpos/index.php?content_id=142\n */\nexport function qrcodeCorrectionLevel(n = 48) {\n  return [GS, 0x28, 0x6b, 0x03, 0x00, 0x31, 0x45, n];\n}\n", "import { GS } from './common';\n\n/**\n * QR Code: Select the model\n * | Format   | Value                             |\n * |---------|------------------------------------|\n * | ASCII   | GS   (   k  pL  pH  cn  fn  n1  n2 |\n * | Hex     | 1D  28  6B  04  00  31  41  n1  n2 |\n * | Decimal | 29  40 107   4   0  49  65  n1  n2 |\n *\n * @default n1=50, n2=0\n * @see https://reference.epson-biz.com/modules/ref_escpos/index.php?content_id=140\n */\nexport function qrcodeModel(n1 = 50, n2 = 0) {\n  return [GS, 0x28, 0x6b, 0x04, 0x00, 0x31, 0x41, n1, n2];\n}\n", "import { GS } from './common';\n\n/**\n * QR Code: Print the symbol data in the symbol storage area\n * | Format   | Value                        |\n * |---------|-------------------------------|\n * | ASCII   | GS   (   k  pL  pH  cn  fn  m |\n * | Hex     | 1D  28  6B  03  00  31  51  m |\n * | Decimal | 29  40 107   3   0  49  81  m |\n *\n * @see https://reference.epson-biz.com/modules/ref_escpos/index.php?content_id=144\n */\nexport function qrcodePrint() {\n  return [GS, 0x28, 0x6b, 0x03, 0x00, 0x31, 0x51, 48];\n}\n", "import { GS } from './common';\n\n/**\n * QR Code: Store the data in the symbol storage area\n * | Format   | Value                                  |\n * |---------|-----------------------------------------|\n * | ASCII   | GS   (   k  pL  pH  cn  fn   m  d1...dk |\n * | Hex     | 1D  28  6B  pL  pH  31  50  30  d1...dk |\n * | Decimal | 29  40 107  pL  pH  49  80  48  d1...dk |\n *\n * @see https://reference.epson-biz.com/modules/ref_escpos/index.php?content_id=143\n */\nexport function qrcodeStore(pL: number, pH: number, data: ArrayLike<number>) {\n  const base = [GS, 0x28, 0x6b, pL, pH, 0x31, 0x50, 0x30];\n  return base.concat(Array.from(data));\n}\n", "import { ESC } from './common';\n\n/**\n * Turn emphasized mode on/off\n * | Format   | Value    |\n * |---------|----------|\n * | ASCII   | ESC E n  |\n * | Hex     | 1B 45 n  |\n * | Decimal | 27 69 n  |\n *\n * @see https://reference.epson-biz.com/modules/ref_escpos/index.php?content_id=25\n */\nexport function textBold(n: number) {\n  return [ESC, 0x45, n];\n}\n", "import { ESC } from './common';\n\n/**\n * Select character font\n * | Format   | Value    |\n * |---------|----------|\n * | ASCII   | ESC M n  |\n * | Hex     | 1B 4D n  |\n * | Decimal | 27 7 n  |\n *\n * @see https://reference.epson-biz.com/modules/ref_escpos/index.php?content_id=27\n */\nexport function textFont(n: number) {\n  return [ESC, 0x4d, n];\n}\n", "import { ESC } from './common';\n\n/**\n * Select print mode(s)\n * | Format   | Value    |\n * |---------|----------|\n * | ASCII   | ESC ! n  |\n * | Hex     | 1B 21 n  |\n * | Decimal | 27 33 n  |\n *\n * @see https://www.epson-biz.com/modules/ref_escpos/index.php?content_id=23\n */\nexport function textMode(n: number) {\n  return [ESC, 0x21, n];\n}\n", "import { GS } from './common';\n\n/**\n * Select character size\n * | Format   | Value    |\n * |---------|----------|\n * | ASCII   | GS ! n  |\n * | Hex     | 1D 21 n  |\n * | Decimal | 29 33 n  |\n *\n * @see https://reference.epson-biz.com/modules/ref_escpos/index.php?content_id=34\n */\nexport function textSize(n: number) {\n  return [GS, 0x21, n];\n}\n", "import { ESC } from './common';\n\n/**\n * Turn underline mode on/off\n * | Format   | Value    |\n * |---------|----------|\n * | ASCII   | ESC - n  |\n * | Hex     | 1B 2D n  |\n * | Decimal | 27 45 n  |\n *\n * @see https://reference.epson-biz.com/modules/ref_escpos/index.php?content_id=24\n */\nexport function textUnderline(n: number) {\n  return [ESC, 0x2d, n];\n}\n", "import { encode as _encode } from 'iconv-lite';\nimport { CharacterSet } from './CharacterSet';\n\nexport function encode(text: string, characterSet: CharacterSet): Uint8Array {\n  return _encode(text, encoding[characterSet]);\n}\n\nconst encoding: Record<CharacterSet, string> = {\n  pc437_usa: 'CP437',\n  pc850_multilingual: 'CP850',\n  pc860_portuguese: 'CP860',\n  pc863_canadian_french: 'CP863',\n  pc865_nordic: 'CP865',\n  pc851_greek: 'CP860',\n  pc857_turkish: 'CP857',\n  pc737_greek: 'CP737',\n  iso8859_7_greek: 'ISO-8859-7',\n  wpc1252: 'CP1252',\n  pc866_cyrillic2: 'CP866',\n  pc852_latin2: 'CP852',\n  slovenia: 'CP852',\n  pc858_euro: 'CP858',\n  wpc775_baltic_rim: 'CP775',\n  pc855_cyrillic: 'CP855',\n  pc861_icelandic: 'CP861',\n  pc862_hebrew: 'CP862',\n  pc864_arabic: 'CP864',\n  pc869_greek: 'CP869',\n  iso8859_2_latin2: 'ISO-8859-2',\n  iso8859_15_latin9: 'ISO-8859-15',\n  pc1125_ukranian: 'CP1125',\n  wpc1250_latin2: 'WIN1250',\n  wpc1251_cyrillic: 'WIN1251',\n  wpc1253_greek: 'WIN1253',\n  wpc1254_turkish: 'WIN1254',\n  wpc1255_hebrew: 'WIN1255',\n  wpc1256_arabic: 'WIN1256',\n  wpc1257_baltic_rim: 'WIN1257',\n  wpc1258_vietnamese: 'WIN1258',\n  kz1048_kazakhstan: 'RK1048',\n  japan: 'EUC-JP',\n  korea: 'EUC-KR',\n  china: 'EUC-CN',\n  hk_tw: 'Big5-HKSCS',\n};\n", "import { BasePrinter } from './BasePrinter';\nimport { CharacterSet } from './CharacterSet';\n\ninterface Options {\n  characterSet?: CharacterSet;\n}\n\nexport class EpsonPrinter extends BasePrinter {\n  constructor(options?: Options) {\n    super(options);\n  }\n}\n", "import { ESC, GS } from './common';\n\n/**\n * Set QR code cell\n * | Format   | Value                  |\n * |---------|-------------------------|\n * | ASCII   | ESC  GS   y   S   2   n |\n * | Hex     |  1B  1D  79  53  32   n |\n * | Decimal |  27  29 121  83  50   n |\n *\n * @default n=3\n * @see https://www.starmicronics.com/support/Mannualfolder/escpos_cm_en.pdf\n */\nexport function starQRCodeCellSize(n = 3) {\n  return [ESC, GS, 0x79, 0x53, 0x32, n];\n}\n", "import { ESC, GS } from './common';\n\n/**\n * Set QR code cell\n * | Format  | Value                   |\n * |---------|-------------------------|\n * | ASCII   | ESC  GS   y   S   2   n |\n * | Hex     |  1B  1D  79  53  31   n |\n * | Decimal |  27  29 121  83  49   n |\n *\n * | n | Mistake Correction Level | Mistake Correction Rate (%) |\n * |---|--------------------------|-----------------------------|\n * | 0 | L                        | 7                           |\n * | 1 | M                        | 15                          |\n * | 2 | Q                        | 25                          |\n * | 3 | H                        | 30                          |\n *\n * @default n=0\n * @see https://www.starmicronics.com/support/Mannualfolder/escpos_cm_en.pdf\n */\nexport function starQRCodeCorrectionLevel(n = 0) {\n  return [ESC, GS, 0x79, 0x53, 0x31, n];\n}\n", "import { ESC, GS } from './common';\n\n/**\n * Set QR code model\n * | Format  | Value                   |\n * |---------|-------------------------|\n * | ASCII   | ESC  GS   y   S   0   n |\n * | Hex     |  1B  1D  79  53  30   n |\n * | Decimal |  27  29 121  83  48   n |\n *\n * | n | Set Model |\n * |---|-----------|\n * | 1 | Model1    |\n * | 2 | Model2    |\n *\n * @default n=2\n * @see https://www.starmicronics.com/support/Mannualfolder/escpos_cm_en.pdf\n */\nexport function starQRCodeModel(n = 2) {\n  return [ESC, GS, 0x79, 0x53, 0x30, n];\n}\n", "import { ESC, GS } from './common';\n\n/**\n * Print QR code\n * | Format  | Value           |\n * |---------|-----------------|\n * | ASCII   | ESC  GS   y   P |\n * | Hex     |  1B  1D  79  50 |\n * | Decimal |  27  29 121  80 |\n *\n * @see https://www.starmicronics.com/support/Mannualfolder/escpos_cm_en.pdf\n */\nexport function starQRCodePrint() {\n  return [ESC, GS, 0x79, 0x50];\n}\n", "import { ESC, GS } from './common';\n\n/**\n * Set QR code cell size (Auto Setting)\n * | Format  | Value                                   |\n * |---------|-----------------------------------------|\n * | ASCII   | ESC GS   y   D   1   m  nL  nH  d1...dk |\n * | Hex     |  1B 1D  79  44  31   m  nL  nH  d1...dk |\n * | Decimal |  27 29 121  68  49   m  nL  nH  d1...dk |\n *\n * m = 0\n * @see https://www.starmicronics.com/support/Mannualfolder/escpos_cm_en.pdf\n */\nexport function starQRCodeStore(nL: number, nH: number, data: ArrayLike<number>) {\n  const base = [ESC, GS, 0x79, 0x44, 0x31, 0, nL, nH];\n  return base.concat(Array.from(data));\n}\n", "import { BasePrinter } from './BasePrinter';\nimport { CharacterSet } from './CharacterSet';\nimport { QRCodeOptions } from './Printer';\nimport { starQRCodeCellSize } from './commands/starQRCodeCellSize';\nimport { starQRCodeCorrectionLevel } from './commands/starQRCodeCorrectionLevel';\nimport { starQRCodeModel } from './commands/starQRCodeModel';\nimport { starQRCodePrint } from './commands/starQRCodePrint';\nimport { starQRCodeStore } from './commands/starQRCodeStore';\nimport { encode } from './encode';\n\ninterface Options {\n  characterSet?: CharacterSet;\n}\n\nexport class StarPrinter extends BasePrinter {\n  constructor(options?: Options) {\n    super(options);\n  }\n\n  qrcode(data: string, options: QRCodeOptions = {}): this {\n    const { model = 'model2', cellSize = 3, correction = 'L' } = options;\n    const modelValue = (() => {\n      switch (model) {\n        case 'model1':\n          return 1;\n        case 'model2':\n          return 2;\n        case 'micro':\n          return 3;\n      }\n    })();\n    this.cmds.push({\n      name: 'qrcodeModel',\n      args: [model],\n      data: starQRCodeModel(modelValue),\n    });\n\n    this.cmds.push({\n      name: 'qrcodeCellSize',\n      args: [cellSize],\n      data: starQRCodeCellSize(cellSize),\n    });\n\n    const correctionValue = (() => {\n      switch (correction) {\n        case 'L':\n          return 0;\n        case 'M':\n          return 1;\n        case 'Q':\n          return 2;\n        case 'H':\n          return 3;\n      }\n    })();\n    this.cmds.push({\n      name: 'qrcodeCorrection',\n      args: [correction],\n      data: starQRCodeCorrectionLevel(correctionValue),\n    });\n\n    const encoded = encode(data, 'pc437_usa'); // ascii\n    const length = new ArrayBuffer(2);\n    const view = new DataView(length);\n    view.setUint16(0, encoded.byteLength, true);\n\n    const pL = view.getUint8(0);\n    const pH = view.getUint8(1);\n\n    this.cmds.push({\n      name: 'qrcodeStore',\n      args: [data],\n      data: starQRCodeStore(pL, pH, encoded),\n    });\n    this.cmds.push({\n      name: 'qrcodePrint',\n      data: starQRCodePrint(),\n    });\n\n    return this;\n  }\n}\n"],
  "mappings": "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",
  "names": ["characterSet", "_encode"]
}
