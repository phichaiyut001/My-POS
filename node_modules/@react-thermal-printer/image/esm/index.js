// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/image/src/transforms/floydSteinberg.ts
import floyd_steinberg from "floyd-steinberg";
var floydSteinberg = (image) => floyd_steinberg(image);

// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/image/src/transforms/index.ts
var transforms = { floydSteinberg };

// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/image/src/imageToRaster.ts
var defaultRgbToBlack = ({ r, g, b, a }) => a > 0 && (r + g + b) / 3 < 230;
function imageToRaster(image, { rgbToBlack = defaultRgbToBlack } = {}) {
  const pixels = getPixels(image);
  const raster = [];
  for (let i = 0; i < image.height; i++) {
    for (let j = 0; j < Math.ceil(image.width / 8); j++) {
      let byte = 0;
      for (let k = 0; k < 8; k++) {
        let pixel = pixels[i]?.[j * 8 + k];
        if (pixel === void 0) {
          pixel = {
            a: 0,
            r: 0,
            g: 0,
            b: 0
          };
        }
        const color = rgbToBlack(pixel);
        if (Boolean(color)) {
          const mask = 1 << 7 - k;
          byte |= mask;
        }
      }
      raster.push(byte);
    }
  }
  return raster;
}
function getPixels(image) {
  const { data, width, height } = image;
  const pixels = [];
  for (let i = 0; i < height; i++) {
    const line = [];
    for (let j = 0; j < width; j++) {
      const index = width * i + j << 2;
      line.push({
        r: data[index],
        g: data[index + 1],
        b: data[index + 2],
        a: data[index + 3]
      });
    }
    pixels.push(line);
  }
  return pixels;
}
export {
  imageToRaster,
  transforms
};
//# sourceMappingURL=index.js.map
