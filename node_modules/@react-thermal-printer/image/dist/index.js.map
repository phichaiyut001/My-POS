{
  "version": 3,
  "sources": ["pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/image/src/index.ts", "pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/image/src/transforms/floydSteinberg.ts", "pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/image/src/transforms/index.ts", "pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/image/src/imageToRaster.ts"],
  "sourcesContent": ["// TODO: export as secondary import path for tree-shaking\nexport { transforms } from './transforms';\nexport type { ImageTransform } from './transforms';\n\nexport type { Image } from './Image';\nexport type { ImageToRasterOptions } from './imageToRaster';\nexport { imageToRaster } from './imageToRaster';\n", "import floyd_steinberg from 'floyd-steinberg';\nimport { ImageTransform } from './ImageTransform';\n\nexport const floydSteinberg: ImageTransform = image => floyd_steinberg(image as any);\n", "import { floydSteinberg } from './floydSteinberg';\n\nexport type { ImageTransform } from './ImageTransform';\nexport const transforms = { floydSteinberg };\n", "import { Image } from './Image';\n\nexport interface ImageToRasterOptions {\n  /**\n   * Converts rgb color into black.\n   * Returns true or 1 to fill black color.\n   * If returns false or 0, will be empty pixel.\n   *\n   * @default a > 0 && (r + g + b) / 3 < 230\n   */\n  rgbToBlack?: (pixel: Pixel) => boolean | 1 | 0;\n}\n\nconst defaultRgbToBlack = ({ r, g, b, a }: Pixel) => a > 0 && (r + g + b) / 3 < 230;\n\nexport function imageToRaster(\n  image: Image,\n  { rgbToBlack = defaultRgbToBlack }: ImageToRasterOptions = {}\n): number[] {\n  const pixels = getPixels(image);\n  const raster: number[] = [];\n\n  for (let i = 0; i < image.height; i++) {\n    for (let j = 0; j < Math.ceil(image.width / 8); j++) {\n      let byte = 0x0;\n      for (let k = 0; k < 8; k++) {\n        let pixel = pixels[i]?.[j * 8 + k];\n\n        // Image overflow\n        if (pixel === undefined) {\n          pixel = {\n            a: 0,\n            r: 0,\n            g: 0,\n            b: 0,\n          };\n        }\n\n        const color = rgbToBlack(pixel);\n        // eslint-disable-next-line no-extra-boolean-cast\n        if (Boolean(color)) {\n          const mask = 1 << (7 - k);\n          byte |= mask;\n        }\n      }\n      raster.push(byte);\n    }\n  }\n  return raster;\n}\n\ninterface Pixel {\n  r: number;\n  g: number;\n  b: number;\n  a: number;\n}\n\nfunction getPixels(image: Image): Pixel[][] {\n  const { data, width, height } = image;\n  const pixels: Pixel[][] = [];\n\n  for (let i = 0; i < height; i++) {\n    const line: Pixel[] = [];\n\n    for (let j = 0; j < width; j++) {\n      const index = (width * i + j) << 2;\n      line.push({\n        r: data[index]!,\n        g: data[index + 1]!,\n        b: data[index + 2]!,\n        a: data[index + 3]!,\n      });\n    }\n\n    pixels.push(line);\n  }\n\n  return pixels;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,6BAA4B;AAGrB,IAAM,iBAAiC,eAAS,uBAAAA,SAAgB,KAAY;;;ACA5E,IAAM,aAAa,EAAE,eAAe;;;ACU3C,IAAM,oBAAoB,CAAC,EAAE,GAAG,GAAG,GAAG,EAAE,MAAa,IAAI,MAAM,IAAI,IAAI,KAAK,IAAI;AAEzE,SAAS,cACd,OACA,EAAE,aAAa,kBAAkB,IAA0B,CAAC,GAClD;AACV,QAAM,SAAS,UAAU,KAAK;AAC9B,QAAM,SAAmB,CAAC;AAE1B,WAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,aAAS,IAAI,GAAG,IAAI,KAAK,KAAK,MAAM,QAAQ,CAAC,GAAG,KAAK;AACnD,UAAI,OAAO;AACX,eAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AAC1B,YAAI,QAAQ,OAAO,KAAK,IAAI,IAAI;AAGhC,YAAI,UAAU,QAAW;AACvB,kBAAQ;AAAA,YACN,GAAG;AAAA,YACH,GAAG;AAAA,YACH,GAAG;AAAA,YACH,GAAG;AAAA,UACL;AAAA,QACF;AAEA,cAAM,QAAQ,WAAW,KAAK;AAE9B,YAAI,QAAQ,KAAK,GAAG;AAClB,gBAAM,OAAO,KAAM,IAAI;AACvB,kBAAQ;AAAA,QACV;AAAA,MACF;AACA,aAAO,KAAK,IAAI;AAAA,IAClB;AAAA,EACF;AACA,SAAO;AACT;AASA,SAAS,UAAU,OAAyB;AAC1C,QAAM,EAAE,MAAM,OAAO,OAAO,IAAI;AAChC,QAAM,SAAoB,CAAC;AAE3B,WAAS,IAAI,GAAG,IAAI,QAAQ,KAAK;AAC/B,UAAM,OAAgB,CAAC;AAEvB,aAAS,IAAI,GAAG,IAAI,OAAO,KAAK;AAC9B,YAAM,QAAS,QAAQ,IAAI,KAAM;AACjC,WAAK,KAAK;AAAA,QACR,GAAG,KAAK;AAAA,QACR,GAAG,KAAK,QAAQ;AAAA,QAChB,GAAG,KAAK,QAAQ;AAAA,QAChB,GAAG,KAAK,QAAQ;AAAA,MAClB,CAAC;AAAA,IACH;AAEA,WAAO,KAAK,IAAI;AAAA,EAClB;AAEA,SAAO;AACT;",
  "names": ["floyd_steinberg"]
}
