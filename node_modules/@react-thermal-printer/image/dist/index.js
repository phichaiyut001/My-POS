var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/image/src/index.ts
var src_exports = {};
__export(src_exports, {
  imageToRaster: () => imageToRaster,
  transforms: () => transforms
});
module.exports = __toCommonJS(src_exports);

// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/image/src/transforms/floydSteinberg.ts
var import_floyd_steinberg = __toESM(require("floyd-steinberg"));
var floydSteinberg = (image) => (0, import_floyd_steinberg.default)(image);

// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/image/src/transforms/index.ts
var transforms = { floydSteinberg };

// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/image/src/imageToRaster.ts
var defaultRgbToBlack = ({ r, g, b, a }) => a > 0 && (r + g + b) / 3 < 230;
function imageToRaster(image, { rgbToBlack = defaultRgbToBlack } = {}) {
  const pixels = getPixels(image);
  const raster = [];
  for (let i = 0; i < image.height; i++) {
    for (let j = 0; j < Math.ceil(image.width / 8); j++) {
      let byte = 0;
      for (let k = 0; k < 8; k++) {
        let pixel = pixels[i]?.[j * 8 + k];
        if (pixel === void 0) {
          pixel = {
            a: 0,
            r: 0,
            g: 0,
            b: 0
          };
        }
        const color = rgbToBlack(pixel);
        if (Boolean(color)) {
          const mask = 1 << 7 - k;
          byte |= mask;
        }
      }
      raster.push(byte);
    }
  }
  return raster;
}
function getPixels(image) {
  const { data, width, height } = image;
  const pixels = [];
  for (let i = 0; i < height; i++) {
    const line = [];
    for (let j = 0; j < width; j++) {
      const index = width * i + j << 2;
      line.push({
        r: data[index],
        g: data[index + 1],
        b: data[index + 2],
        a: data[index + 3]
      });
    }
    pixels.push(line);
  }
  return pixels;
}
//# sourceMappingURL=index.js.map
